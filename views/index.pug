doctype html
html(data-theme="light")
  head
    title= welcome
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css")
    style.
      /* General Styles */
      body {
        font-family: 'Roboto', Arial, sans-serif;
        padding-top: 20px;
        margin: 0;
        transition: background-color 0.3s, color 0.3s;
        background-color: var(--background-color);
        color: var(--text-color);
      }
      #videoplayer {
        border: 2px solid var(--primary-color);
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        max-width: 100%;
        display: block;
        margin: 20px auto;
      }
      #loading-indicator {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100px;
      }
      .spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .spinner-container p {
        margin-top: 10px;
        font-size: 1.2rem;
        color: var(--primary-color);
      }
      .download-container {
        text-align: center;
        margin-top: 15px;
      }
      .hero {
        background-color: var(--hero-bg-color);
        color: var(--hero-text-color);
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s, color 0.3s;
      }
      .hero h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
      }
      .hero p {
        font-size: 1.2rem;
      }
      .form-container {
        background-color: var(--form-bg-color);
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        color: var(--form-text-color);
        transition: background-color 0.3s, color 0.3s;
      }
      .form-control {
        background-color: var(--input-bg-color);
        color: var(--input-text-color);
        border: 1px solid var(--input-border-color);
        border-radius: 4px;
        padding: 10px;
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
      }
      .form-control::placeholder {
        color: var(--placeholder-color);
        opacity: 1; /* Ensure placeholder is fully visible */
        transition: color 0.3s;
      }
      .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Updated to match new primary color */
      }
      .theme-toggle {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 50px;
        height: 50px;
        margin: 20px auto;
        border-radius: 50%;
        background-color: var(--primary-color);
        color: var(--toggle-icon-color);
        font-size: 1.5rem;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s, transform 0.2s, color 0.3s;
      }
      .theme-toggle:hover {
        transform: scale(1.1);
      }
      .alert {
        background-color: var(--alert-bg-color);
        color: var(--alert-text-color);
        border: 1px solid var(--alert-border-color);
        border-radius: 4px;
        padding: 15px;
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
      }
      .alert h4 {
        margin-bottom: 10px;
      }

      /* Light Theme Variables */
      html[data-theme="light"] {
        --primary-color: #007bff; /* Updated to a consistent blue theme */
        --hero-bg-color: #f7f7f8;
        --hero-text-color: #0e0e10;
        --alert-bg-color: #ffffff;
        --alert-text-color: #0e0e10;
        --alert-border-color: #d3d3d3;
        --form-bg-color: #ffffff;
        --form-text-color: #0e0e10;
        --input-bg-color: #f7f7f8;
        --input-text-color: #0e0e10;
        --input-border-color: #d3d3d3;
        --placeholder-color: #6c757d; /* Subtle gray for light mode */
        --toggle-icon-color: white;
        --background-color: #f7f7f8;
        --text-color: #0e0e10;
      }

      /* Redesigned Dark Theme Variables */
      html[data-theme="dark"] {
        --primary-color: #007bff; /* Updated to a consistent blue theme */
        --hero-bg-color: #2a2a2a; /* Darker hero background */
        --hero-text-color: #ffffff; /* High contrast text */
        --alert-bg-color: #1e1e1e; /* Dark alert background */
        --alert-text-color: #e0e0e0; /* High contrast text for alerts */
        --alert-border-color: #444; /* Subtle border for alerts */
        --form-bg-color: #1e1e1e; /* Slightly lighter than the background */
        --form-text-color: #e0e0e0; /* High contrast text */
        --input-bg-color: #2a2a2a; /* Darker input background */
        --input-text-color: #e0e0e0; /* Light text for better readability */
        --input-border-color: #444; /* Subtle border color */
        --placeholder-color: #a0a0a0; /* Subtle gray for dark mode */
        --toggle-icon-color: #f1f1f1; /* Ensure icon is visible in dark mode */
        --background-color: #0e0e10;
        --text-color: #f1f1f1;
      }
    script.
      function applyTheme(theme) {
        const html = document.documentElement;
        html.setAttribute("data-theme", theme);
        localStorage.setItem("theme", theme); // Save the theme preference
        const themeIcon = document.querySelector("#theme-icon");
        themeIcon.className = theme === "dark" ? "fas fa-sun" : "fas fa-moon";
      }

      // Detect system theme and apply saved or system theme
      document.addEventListener("DOMContentLoaded", () => {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme) {
          applyTheme(savedTheme);
        } else {
          const systemPrefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
          applyTheme(systemPrefersDark ? "dark" : "light");
        }

        // Listen for system theme changes
        window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
          applyTheme(e.matches ? "dark" : "light");
        });
      });

      function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute("data-theme");
        const newTheme = currentTheme === "light" ? "dark" : "light";
        applyTheme(newTheme);
      }

      async function handleFormSubmit(event) {
        event.preventDefault();
        const form = event.target;
        const urlInput = form.querySelector("#url");
        const loadingIndicator = document.querySelector("#loading-indicator");
        const videoContainer = document.querySelector("#video-container");
        const errorContainer = document.querySelector("#error-container");

        // Clear previous results
        videoContainer.innerHTML = "";
        errorContainer.innerHTML = "";

        // Show loading animation
        loadingIndicator.style.display = "flex";

        // Append &parent if not present
        const appHost = window.location.hostname;
        let url = urlInput.value;
        const parentParam = `&parent=${appHost}`;
        if (url.includes("&parent=")) {
          url = url.replace(/&parent=[^&]*/, parentParam); // Replace existing &parent
        } else {
          url += parentParam; // Add &parent
        }

        try {
          // Fetch MP4 URL from /get-mp4
          const response = await fetch(`/get-mp4?url=${encodeURIComponent(url)}`);
          if (!response.ok) {
            throw new Error(await response.text());
          }
          const data = await response.json();

          // Display video
          const videoElement = document.createElement("video");
          videoElement.id = "videoplayer";
          videoElement.controls = true;
          videoElement.autoplay = true;
          videoElement.innerHTML = `<source src="${data.mp4Url}" type="video/mp4">`;
          videoContainer.appendChild(videoElement);

          // Add download button
          const downloadContainer = document.createElement("div");
          downloadContainer.className = "download-container";
          const downloadButton = document.createElement("a");
          downloadButton.href = data.mp4Url;
          downloadButton.target = "_blank";
          downloadButton.className = "btn btn-primary";
          downloadButton.textContent = "#{download_mp4}";
          downloadContainer.appendChild(downloadButton);
          videoContainer.appendChild(downloadContainer);
        } catch (error) {
          // Display error message using translation
          errorContainer.textContent = "#{error_message}";
          errorContainer.classList.add("alert", "alert-danger", "text-center");
        } finally {
          // Hide loading animation
          loadingIndicator.style.display = "none";
        }
      }
  body
    .container
      .hero
        h1= welcome
        p= usage_instructions

      i#theme-icon.theme-toggle.fas.fa-moon(onclick="toggleTheme()")

      .form-container
        .alert.alert-info
          h4= how_to_get_embed_url
          p= detailed_instructions
          ol
            li= step_1
            li= step_2
            li= step_3
            li= step_4
            li= step_5
            li= step_6
            li= step_7

        .text-center.mb-4
          a.btn.btn-primary(href=apiDocsUrl, target="_blank")= view_api_docs

        form(action="/get-mp4" method="get" onsubmit="handleFormSubmit(event)")
          .mb-3
            label(for="url")= enter_twitch_url
            input.form-control(type="text" name="url" id="url" required placeholder= twitch_url_placeholder)
          button.btn.btn-success(type="submit")= try_it

      .text-center.mt-3
        div#loading-indicator.spinner-container(style="display: none;")
          div.spinner-border.text-primary(role="status")
          p= loading_message

      #video-container.mt-4
      #error-container.mt-4