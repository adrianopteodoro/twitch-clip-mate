doctype html
html
  head
    title= welcome
    link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css")
    style.
      /* Light mode styles */
      body {
        background-color: #f8f9fa;
        color: #212529;
        font-family: Arial, sans-serif;
      }
      #videoplayer {
        border: 2px solid #007bff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        max-width: 100%; /* Ensure the video stays within container boundaries */
        display: block; /* Center the video */
        margin: 0 auto; /* Center the video */
      }
      #loading-indicator {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100px;
      }
      .spinner-container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .spinner-container p {
        margin-top: 10px;
        font-size: 1.2rem;
        color: #007bff;
      }
      .download-container {
        text-align: center; /* Center the download button */
        margin-top: 15px;
      }

      /* Dark mode styles */
      @media (prefers-color-scheme: dark) {
        body {
          background-color: #1e1e2f;
          color: #e4e4e7;
          font-family: Arial, sans-serif;
        }
        #videoplayer {
          border: 2px solid #4f46e5;
          border-radius: 8px;
          box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);
        }
        #loading-indicator {
          color: #4f46e5;
        }
        .spinner-container p {
          color: #4f46e5;
        }
        .alert.alert-info {
          background-color: #2a2a3b;
          color: #e4e4e7;
          border-color: #4f46e5;
        }
        a.btn-primary {
          background-color: #4f46e5;
          border-color: #4f46e5;
        }
        a.btn-primary:hover {
          background-color: #3b3bb3;
          border-color: #3b3bb3;
        }
        button.btn-success {
          background-color: #22c55e;
          border-color: #22c55e;
        }
        button.btn-success:hover {
          background-color: #16a34a;
          border-color: #16a34a;
        }
      }
    script.
      async function handleFormSubmit(event) {
        event.preventDefault();
        const form = event.target;
        const urlInput = form.querySelector("#url");
        const loadingIndicator = document.querySelector("#loading-indicator");
        const videoContainer = document.querySelector("#video-container");
        const errorContainer = document.querySelector("#error-container");

        // Clear previous results
        videoContainer.innerHTML = "";
        errorContainer.innerHTML = "";

        // Show loading animation
        loadingIndicator.style.display = "flex";

        // Append &parent if not present
        const appHost = window.location.hostname;
        let url = urlInput.value;
        const parentParam = `&parent=${appHost}`;
        if (url.includes("&parent=")) {
          url = url.replace(/&parent=[^&]*/, parentParam); // Replace existing &parent
        } else {
          url += parentParam; // Add &parent
        }

        try {
          // Fetch MP4 URL from /get-mp4
          const response = await fetch(`/get-mp4?url=${encodeURIComponent(url)}`);
          if (!response.ok) {
            throw new Error(await response.text());
          }
          const data = await response.json();

          // Display video
          const videoElement = document.createElement("video");
          videoElement.id = "videoplayer";
          videoElement.controls = true;
          videoElement.autoplay = true;
          videoElement.innerHTML = `<source src="${data.mp4Url}" type="video/mp4">`;
          videoContainer.appendChild(videoElement);

          // Add download button
          const downloadContainer = document.createElement("div");
          downloadContainer.className = "download-container";
          const downloadButton = document.createElement("a");
          downloadButton.href = data.mp4Url;
          downloadButton.target = "_blank";
          downloadButton.className = "btn btn-primary";
          downloadButton.textContent = "Download MP4";
          downloadContainer.appendChild(downloadButton);
          videoContainer.appendChild(downloadContainer);
        } catch (error) {
          // Display error message using translation
          errorContainer.textContent = "#{error_message}";
          errorContainer.classList.add("alert", "alert-danger", "text-center");
        } finally {
          // Hide loading animation
          loadingIndicator.style.display = "none";
        }
      }
  body
    .container.mt-5
      h1.text-center= welcome
      p.text-center= usage_instructions

      // Explanation for getting embed URL
      .alert.alert-info
        h4= how_to_get_embed_url
        p= detailed_instructions
        ol
          li= step_1
          li= step_2
          li= step_3
          li= step_4
          li= step_5
          li= step_6
          li= step_7

      // Button to API Docs
      .text-center.mb-4
        a.btn.btn-primary(href=apiDocsUrl, target="_blank")= view_api_docs

      // Form to try /get-mp4
      form(action="/get-mp4" method="get" onsubmit="handleFormSubmit(event)")
        .mb-3
          label(for="url")= enter_twitch_url
          input.form-control(type="text" name="url" id="url" required)
        button.btn.btn-success(type="submit")= try_it

      // Loading animation
      .text-center.mt-3
        div#loading-indicator.spinner-container(style="display: none;")
          div.spinner-border.text-primary(role="status")
          p= loading_message

      // Display video or error
      #video-container.mt-4
      #error-container.mt-4